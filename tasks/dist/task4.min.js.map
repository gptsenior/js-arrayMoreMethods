{"version":3,"sources":["task4.js"],"names":["getMostFuelEfficientCars","cars","brand","car","fuelConsumption","filter","sort","a","b","allFuelEfficient","localeCompare","model","log","console"],"mappings":"aAEA,SAAAA,yBAAAC,EAAAC,GAGE,OADOF,EAAAA,MAAT,SAAAG,GAAwCD,OAAxCC,EAA+CC,gBAAA,IACFD,EAA3CE,OAAA,SAAAF,GAAA,OAAAA,EAAAD,QAAAA,GAAAC,EAAAC,gBAAA,IAIKE,KAAK,SAACC,EAAGC,GAHVC,OAAAA,EAAAA,kBAAkBD,EAAAJ,gBAEjBC,EAAAA,MAAOK,cAAGF,EAAAG,OACLJ,EAAAH,gBAAUI,EAAAJ,kBAGb,GAGN,IAAAH,KAAA,CAMD,CAAEC,MAAO,SAAUS,MAAO,UAAWP,gBAAiB,KALtD,CAAAF,MAAA,QAAAS,MAAA,QAAAP,gBAAA,KAGF,CAAAF,MAAA,SAAAS,MAAA,QAAAP,gBAAA,KAKE,CAAEF,MAAO,OAAQS,MAAO,QAASP,gBAAiB,KAClD,CAAEF,MAAO,QAASS,MAAO,SAAUP,gBAAiB,KALtD,CAAMH,MAAO,OACXU,MAAA,KAAAP,gBAAA,KAAEF,CAAAA,MAAO,OAATS,MAAA,KAAAP,gBAAA,KAAmBO,CAAAA,MAAO,QAA1BA,MAAA,UAAAP,gBAAA,KAAqCA,CAAAA,MAAAA,QAAiBO,MAAA,UAAAP,gBAAA,MACpCO,QAAKC,IAAEZ,yBAAzBC,KAAA,WAAAY,QACAD,IAAAZ,yBAAAC,KAAA,UAAmBU,QAAKC,IAAEZ,yBAA1BC,KAAA,SAAAY,QACAD,IAAAZ,yBAAAC,KAAA,UAAiBU,QAAKC,IAAEZ,yBAAxBC,KAAA,SAAiCG,OAAAA,QAAeJ","file":"task4.min.js","sourcesContent":["// Маємо масив об'єктів, де кожен об'єкт представляє автомобіль з інформацією про її бренд, модель і витрату палива. \r\n// Завдання — перевірити, чи всі машини в масиві мають витрату палива менше 6 л/100 км. \r\n// Якщо це так, то фільтруємо машини по бренду і повертаємо ті, що найбільш економні.\r\n\r\nfunction getMostFuelEfficientCars(cars, brand) {\r\n  const allFuelEfficient = cars.every(car => car.fuelConsumption < 6);\r\n  if (allFuelEfficient) {\r\n    return cars\r\n      .filter(car => car.brand === brand && car.fuelConsumption < 6)\r\n      .sort((a, b) => {\r\n        if (a.fuelConsumption === b.fuelConsumption) {\r\n          return a.model.localeCompare(b.model);\r\n        }\r\n        return a.fuelConsumption - b.fuelConsumption;\r\n      });\r\n  }\r\n  return [];\r\n}\r\n\r\n// Приклад використання:\r\nconst cars = [\r\n  { brand: 'Toyota', model: 'Corolla', fuelConsumption: 5.2 },\r\n  { brand: 'Honda', model: 'Civic', fuelConsumption: 5.9 },\r\n  { brand: 'Toyota', model: 'Camry', fuelConsumption: 5.5 },\r\n  { brand: 'Ford', model: 'Focus', fuelConsumption: 6.1 },\r\n  { brand: 'Honda', model: 'Accord', fuelConsumption: 5.8 },\r\n  { brand: 'Audi', model: 'A3', fuelConsumption: 5.4 },  \r\n  { brand: 'Audi', model: 'Q5', fuelConsumption: 5.7 },  \r\n  { brand: 'Dodge', model: 'Charger', fuelConsumption: 5.8 }, \r\n  { brand: 'Dodge', model: 'Durango', fuelConsumption: 5.6 }, \r\n];\r\n\r\nconsole.log(getMostFuelEfficientCars(cars, 'Toyota')); \r\n\r\nconsole.log(getMostFuelEfficientCars(cars, 'Honda')); \r\n\r\nconsole.log(getMostFuelEfficientCars(cars, 'Audi'));  \r\n\r\nconsole.log(getMostFuelEfficientCars(cars, 'Dodge'));  \r\n\r\nconsole.log(getMostFuelEfficientCars(cars, 'Ford'));  \r\nmodule.exports = getMostFuelEfficientCars;"]}