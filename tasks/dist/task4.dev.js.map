{"version":3,"sources":["task4.js"],"names":["getMostFuelEfficientCars","cars","brand","allFuelEfficient","every","car","fuelConsumption","filter","sort","a","b","model","localeCompare","console","log","module","exports"],"mappings":";;AAAA;AACA;AACA;AAEA,SAASA,wBAAT,CAAkCC,IAAlC,EAAwCC,KAAxC,EAA+C;AAC7C,MAAMC,gBAAgB,GAAGF,IAAI,CAACG,KAAL,CAAW,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,eAAJ,GAAsB,CAA1B;AAAA,GAAd,CAAzB;;AACA,MAAIH,gBAAJ,EAAsB;AACpB,WAAOF,IAAI,CACRM,MADI,CACG,UAAAF,GAAG;AAAA,aAAIA,GAAG,CAACH,KAAJ,KAAcA,KAAd,IAAuBG,GAAG,CAACC,eAAJ,GAAsB,CAAjD;AAAA,KADN,EAEJE,IAFI,CAEC,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACd,UAAID,CAAC,CAACH,eAAF,KAAsBI,CAAC,CAACJ,eAA5B,EAA6C;AAC3C,eAAOG,CAAC,CAACE,KAAF,CAAQC,aAAR,CAAsBF,CAAC,CAACC,KAAxB,CAAP;AACD;;AACD,aAAOF,CAAC,CAACH,eAAF,GAAoBI,CAAC,CAACJ,eAA7B;AACD,KAPI,CAAP;AAQD;;AACD,SAAO,EAAP;AACD,C,CAED;;;AACA,IAAML,IAAI,GAAG,CACX;AAAEC,EAAAA,KAAK,EAAE,QAAT;AAAmBS,EAAAA,KAAK,EAAE,SAA1B;AAAqCL,EAAAA,eAAe,EAAE;AAAtD,CADW,EAEX;AAAEJ,EAAAA,KAAK,EAAE,OAAT;AAAkBS,EAAAA,KAAK,EAAE,OAAzB;AAAkCL,EAAAA,eAAe,EAAE;AAAnD,CAFW,EAGX;AAAEJ,EAAAA,KAAK,EAAE,QAAT;AAAmBS,EAAAA,KAAK,EAAE,OAA1B;AAAmCL,EAAAA,eAAe,EAAE;AAApD,CAHW,EAIX;AAAEJ,EAAAA,KAAK,EAAE,MAAT;AAAiBS,EAAAA,KAAK,EAAE,OAAxB;AAAiCL,EAAAA,eAAe,EAAE;AAAlD,CAJW,EAKX;AAAEJ,EAAAA,KAAK,EAAE,OAAT;AAAkBS,EAAAA,KAAK,EAAE,QAAzB;AAAmCL,EAAAA,eAAe,EAAE;AAApD,CALW,EAMX;AAAEJ,EAAAA,KAAK,EAAE,MAAT;AAAiBS,EAAAA,KAAK,EAAE,IAAxB;AAA8BL,EAAAA,eAAe,EAAE;AAA/C,CANW,EAOX;AAAEJ,EAAAA,KAAK,EAAE,MAAT;AAAiBS,EAAAA,KAAK,EAAE,IAAxB;AAA8BL,EAAAA,eAAe,EAAE;AAA/C,CAPW,EAQX;AAAEJ,EAAAA,KAAK,EAAE,OAAT;AAAkBS,EAAAA,KAAK,EAAE,SAAzB;AAAoCL,EAAAA,eAAe,EAAE;AAArD,CARW,EASX;AAAEJ,EAAAA,KAAK,EAAE,OAAT;AAAkBS,EAAAA,KAAK,EAAE,SAAzB;AAAoCL,EAAAA,eAAe,EAAE;AAArD,CATW,CAAb;AAYAO,OAAO,CAACC,GAAR,CAAYd,wBAAwB,CAACC,IAAD,EAAO,QAAP,CAApC;AAEAY,OAAO,CAACC,GAAR,CAAYd,wBAAwB,CAACC,IAAD,EAAO,OAAP,CAApC;AAEAY,OAAO,CAACC,GAAR,CAAYd,wBAAwB,CAACC,IAAD,EAAO,MAAP,CAApC;AAEAY,OAAO,CAACC,GAAR,CAAYd,wBAAwB,CAACC,IAAD,EAAO,OAAP,CAApC;AAEAY,OAAO,CAACC,GAAR,CAAYd,wBAAwB,CAACC,IAAD,EAAO,MAAP,CAApC;AACAc,MAAM,CAACC,OAAP,GAAiBhB,wBAAjB","sourcesContent":["// Маємо масив об'єктів, де кожен об'єкт представляє автомобіль з інформацією про її бренд, модель і витрату палива. \r\n// Завдання — перевірити, чи всі машини в масиві мають витрату палива менше 6 л/100 км. \r\n// Якщо це так, то фільтруємо машини по бренду і повертаємо ті, що найбільш економні.\r\n\r\nfunction getMostFuelEfficientCars(cars, brand) {\r\n  const allFuelEfficient = cars.every(car => car.fuelConsumption < 6);\r\n  if (allFuelEfficient) {\r\n    return cars\r\n      .filter(car => car.brand === brand && car.fuelConsumption < 6)\r\n      .sort((a, b) => {\r\n        if (a.fuelConsumption === b.fuelConsumption) {\r\n          return a.model.localeCompare(b.model);\r\n        }\r\n        return a.fuelConsumption - b.fuelConsumption;\r\n      });\r\n  }\r\n  return [];\r\n}\r\n\r\n// Приклад використання:\r\nconst cars = [\r\n  { brand: 'Toyota', model: 'Corolla', fuelConsumption: 5.2 },\r\n  { brand: 'Honda', model: 'Civic', fuelConsumption: 5.9 },\r\n  { brand: 'Toyota', model: 'Camry', fuelConsumption: 5.5 },\r\n  { brand: 'Ford', model: 'Focus', fuelConsumption: 6.1 },\r\n  { brand: 'Honda', model: 'Accord', fuelConsumption: 5.8 },\r\n  { brand: 'Audi', model: 'A3', fuelConsumption: 5.4 },  \r\n  { brand: 'Audi', model: 'Q5', fuelConsumption: 5.7 },  \r\n  { brand: 'Dodge', model: 'Charger', fuelConsumption: 5.8 }, \r\n  { brand: 'Dodge', model: 'Durango', fuelConsumption: 5.6 }, \r\n];\r\n\r\nconsole.log(getMostFuelEfficientCars(cars, 'Toyota')); \r\n\r\nconsole.log(getMostFuelEfficientCars(cars, 'Honda')); \r\n\r\nconsole.log(getMostFuelEfficientCars(cars, 'Audi'));  \r\n\r\nconsole.log(getMostFuelEfficientCars(cars, 'Dodge'));  \r\n\r\nconsole.log(getMostFuelEfficientCars(cars, 'Ford'));  \r\nmodule.exports = getMostFuelEfficientCars;"],"file":"task4.dev.js"}